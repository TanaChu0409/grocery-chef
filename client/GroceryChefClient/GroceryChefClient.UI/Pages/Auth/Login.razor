@page "/Login"
@inject NavigationManager navigation

<Card>
    <CardBody>
        <EditForm EditContext="@loginContext" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <Button Color="ButtonColor.Secondary" @onclick="Back">Back</Button>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Login</Button>
        </EditForm>
    </CardBody>
</Card>

@code {
    private EditContext loginContext;
    private LoginViewModel loginModel = new();

    [Inject]
    private ModalService modalService { get; set; } = default!;
    [Inject]
    private AuthService authService { get; set; } = default!;

    protected override void OnInitialized()
    {
        loginModel = new();
        loginContext = new EditContext(loginModel);
        base.OnInitialized();
    }

    private async Task HandleLogin()
    {
        if (loginContext?.Validate() != true)
        {
            return;
        }

        bool isLogin = await authService.LoginAsync(new Dtos.Auth.LoginUserDto
        {
            Email = loginModel.Email,
            Password = loginModel.Password
        });

        if (!isLogin)
        {
            await ShowErrorModalAsync("Login fail, please try again.");
            return;
        }

        navigation.NavigateTo("/");
    }

    private async Task ShowErrorModalAsync(string errorMessage)
    {
        var modalOptions = new ModalOption
        {
            Title = "Login Error",
            Message = errorMessage,
            Type = ModalType.Danger
        };

        await modalService.ShowAsync(modalOptions);
    }
    
    private void Back()
    {
        navigation.NavigateTo("/");
    }
}
