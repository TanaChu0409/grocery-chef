@page "/carts/details"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Forms
@using BlazorBootstrap
<h3>CartDetails</h3>
<!--下拉選單，選擇購物清單-->
<!--Grid呈現目前的內容-->
<!--Grid提供刪除button或已購買的checkbox-->
<!--提供一個新增食材的按鈕-->
<Card>
    <CardHeader>
        <div class="row">
            <div class="col-sm-3">
                Carts
            </div>
            <div class="col-sm-6">
                <InputSelect @bind-Value="CartId"
                             class="form-control">
                    <option value="@string.Empty">
                        Choose cart...
                    </option>
                    @foreach (var item in cartDetailViewModel.Options)
                    {
                        <option value="@item.CartId">
                            @item.CartName
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Warning"
                        @onclick="ShowAddIngrdientModal"
                        Disabled="@disableAddIngredientButton">
                    <Icon Name="IconName.Plus" />
                    Add Ingredient
                </Button>
            </div>
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Primary"
                        Disabled="true"
                        TooltipTitle="Coming soon..."
                        TooltipPlacement="TooltipPlacement.Top">
                    <Icon Name="IconName.BoxArrowInDown" />
                    Import from recipe
                </Button>
            </div>
        </div>
    </CardHeader>
    <CardBody>
        <!--Grid use client side not server side -->
        <Grid @ref="grid"
              TItem="CartDetailGridViewModel"
              Class="table table-hover table-bordered table-striped"
              DataProvider="CartDetailDataProvider"
              AllowFiltering="false"
              AllowPaging="true"
              AllowSorting="false">
            <GridColumns>
                <GridColumn TItem="CartDetailGridViewModel"
                            HeaderText="Name"
                            PropertyName="Name">
                    @context.Name
                </GridColumn>
                <GridColumn TItem="CartDetailGridViewModel"
                            HeaderText="Quantity"
                            PropertyName="Quantity">
                    @context.Quantity
                </GridColumn>
                <GridColumn TItem="CartDetailGridViewModel"
                            HeaderText="Is Bought"
                            PropertyName="IsBought">
                    <!--無法這樣用-->
                    <!--改成按鈕，用context.IsBought來判斷要顯示已購買還是尚未購買的按鈕-->
                    @if (context.IsBought)
                    {
                        <Button Color="ButtonColor.Warning"
                                @onclick="(() => SetBought(context.IngredientId, false))">
                            <Icon Name="IconName.BoxArrowUp" />
                            Not Bought
                        </Button>
                    }
                    else
                    {
                        <Button Color="ButtonColor.Success"
                                @onclick="(() => SetBought(context.IngredientId, true))">
                            <Icon Name="IconName.BoxArrowDown" />
                            Bought
                        </Button>
                    }
                </GridColumn>
                <GridColumn TItem="CartDetailGridViewModel"
                            HeaderText="Action">
                    <Button Color="ButtonColor.Danger">
                        <Icon Name="IconName.Trash2Fill" />
                        Delete
                    </Button>
                </GridColumn>
            </GridColumns>
        </Grid>
    </CardBody>
    <CardFooter>
        <div class="row">
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Primary"
                        @onclick="SaveCartWithIngredients"
                        Disabled="@disableAddIngredientButton">
                    <Icon Name="IconName.Save" />
                    Save Changes
                </Button>
            </div>
        </div>
    </CardFooter>
</Card>

<Modal @ref="addIngredientModal"
       Title="Add Ingredient"
       Size="ModalSize.Large"
       UseStaticBackdrop="true"
       CloseOnEscape="false">
    <BodyTemplate>
        <div class="row">
            <div class="col-sm-3">
                <label>Ingredient:</label>
            </div>
            <div class="col-sm-9">
                <InputSelect class="form-control" @bind-Value="@selectedIngredient.Id">
                    <option value="@string.Empty">
                        Choose ingredient...
                    </option>
                    @foreach (var ingredient in ingredientOptions)
                    {
                        <option value="@ingredient.Id">
                            @ingredient.Name
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <label>Quantity:</label>
            </div>
            <div class="col-sm-9">
                <NumberInput TValue="int" @bind-Value="@selectedIngredient.Quantity" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary"
                @onclick="CloseAddIngrdientModal">
            <Icon Name="IconName.X" />
            Close
        </Button>
        <Button Color="ButtonColor.Primary"
                @onclick="ImportIngredients">
            <Icon Name="IconName.BoxArrowInDown" />
            Import
        </Button>
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="deleteDialog" />

@code {
    private CartDetailViewModel cartDetailViewModel = default!;

    private Grid<CartDetailGridViewModel> grid = default!;
    private List<CartDetailGridViewModel> gridDataSource = [];

    private CartIngredientSelectedViewModel selectedIngredient = default!;
    private List<IngredientDto> ingredientOptions = [];

    private Modal addIngredientModal = default!;

    private bool disableAddIngredientButton = true;

    private ConfirmDialog deleteDialog = default!;

    [Inject]
    private CartService cartService { get; set; } = default!;
    [Inject]
    private IngredientService ingredientService { get; set; } = default!;
    [Inject]
    private ModalService modalService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        cartDetailViewModel = new();
        cartDetailViewModel.Options = await cartService.GetCartOptions();
        await base.OnInitializedAsync();
    }

    private string? CartId
    {
        get => cartDetailViewModel.CartId;
        set
        {
            if (cartDetailViewModel.CartId == value)
            {
                return;
            }

            cartDetailViewModel.CartId = value;

            _ = InvokeAsync(CartOptionsOnChanged);
        }
    }

    private async Task CartOptionsOnChanged()
    {
        disableAddIngredientButton = true;
        gridDataSource.Clear();

        if (string.IsNullOrWhiteSpace(cartDetailViewModel.CartId))
        {
            if (grid is not null)
            {
                await grid.RefreshDataAsync();
            }
            return;
        }
        disableAddIngredientButton = false;
        var cartWithIngredients = await cartService.GetCartIngredients(cartDetailViewModel.CartId);
        gridDataSource.AddRange(cartWithIngredients);

        if (grid is not null)
        {
            await grid.RefreshDataAsync();
        }
    }

    private async Task<GridDataProviderResult<CartDetailGridViewModel>> CartDetailDataProvider(
        GridDataProviderRequest<CartDetailGridViewModel> request)
    {
        string sorting = string.Empty;
        string direction = string.Empty;
        if (request.Sorting is not null && request.Sorting.Any())
        {
            sorting = string.Join(
                ',',
                request.Sorting.Select(s => s.SortString).ToArray());
            direction = request.Sorting.FirstOrDefault()!.SortDirection.GetSortDirectionString();
        }

        return await Task.FromResult(
            new GridDataProviderResult<CartDetailGridViewModel>()
                {
                    Data = gridDataSource,
                    TotalCount = gridDataSource.Count
                });
    }

    private async Task ShowAddIngrdientModal()
    {
        selectedIngredient = new();
        ingredientOptions = await ingredientService.GetIngredientsForOptions();
        await addIngredientModal.ShowAsync();
    }

    private async Task CloseAddIngrdientModal()
    {
        await addIngredientModal.HideAsync();
    }

    private async Task ImportIngredients()
    {
        if (selectedIngredient is null)
        {
            return;
        }
        gridDataSource.Add(
            new CartDetailGridViewModel
                {
                    IngredientId = selectedIngredient.Id,
                    Name = ingredientOptions.First(i => i.Id == selectedIngredient.Id)?.Name ?? string.Empty,
                    Quantity = selectedIngredient.Quantity,
                    IsBought = false,
                });
        await grid.RefreshDataAsync();
        await CloseAddIngrdientModal();
    }

    private async Task SaveCartWithIngredients()
    {
        if (string.IsNullOrWhiteSpace(CartId))
        {
            await ShowErrorModalAsync("Save ingredient", "Please select a cart");
            return;
        }

        try
        {
            await cartService.UpsertCartIngredients(CartId, gridDataSource);
            await ShowSaveSuccessModalAsync();
        }
        catch (Exception ex)
        {
            await ShowErrorModalAsync("Save ingredient", ex.Message);
        }
    }

    private async Task ShowSaveSuccessModalAsync()
    {
        var modalOptions = new ModalOption
            {
                Title = "Save Successful",
                Message = "Your ingredient has been successfully saved.",
                Type = ModalType.Success
            };

        await modalService.ShowAsync(modalOptions);
    }

    private async Task ShowClearSuccessModalAsync()
    {
        var modalOptions = new ModalOption
            {
                Title = "Clear Successful",
                Message = "Your cart has been successfully clear.",
                Type = ModalType.Success
            };

        await modalService.ShowAsync(modalOptions);
    }

    private async Task ShowErrorModalAsync(string title, string errorMessage)
    {
        var modalOptions = new ModalOption
            {
                Title = title,
                Message = errorMessage,
                Type = ModalType.Danger
            };

        await modalService.ShowAsync(modalOptions);
    }

    private async Task SetBought(string ingredientId, bool isBought)
    {
        if (string.IsNullOrWhiteSpace(CartId))
        {
            await ShowErrorModalAsync("Save ingredient", "Please select a cart");
            return;
        }

        if (isBought)
        {
            try
            {
                await cartService.SetBoughtForIngredient(
                    CartId,
                    ingredientId);
                await grid.RefreshDataAsync();
            }
            catch (Exception ex)
            {
                await ShowErrorModalAsync("Set bought", ex.Message);
            }
        }
    }
}
