@page "/carts/details"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Forms
@using BlazorBootstrap
<h3>CartDetails</h3>
<!--下拉選單，選擇購物清單-->
<!--Grid呈現目前的內容-->
<!--Grid提供刪除button或已購買的checkbox-->
<!--提供一個新增食材的按鈕-->
<Card>
    <CardHeader>
        <div class="row">
            <div class="col-sm-3">
                Carts
            </div>
            <div class="col-sm-6">
                <InputSelect @bind-Value="CartId"
                             class="form-control">
                    <option value="@string.Empty">
                        Choose cart...
                    </option>
                    @foreach (var item in cartDetailViewModel.Options)
                    {
                        <option value="@item.CartId">
                            @item.CartName
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Warning"
                        @onclick="ShowAddIngrdientModal"
                        Disabled="@disableAddIngredientButton">
                    <Icon Name="IconName.Plus" />
                    Add Ingredient
                </Button>
            </div>
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Primary"
                        Disabled="true"
                        TooltipTitle="Coming soon..."
                        TooltipPlacement="TooltipPlacement.Top">
                    <Icon Name="IconName.BoxArrowInDown" />
                    Import from recipe
                </Button>
            </div>
        </div>
    </CardHeader>
    <CardBody>
        <!--Grid use client side not server side -->
        <Grid @ref="grid"
              TItem="CartDetailGridViewModel"
              Class="table table-hover table-bordered table-striped"
              DataProvider="CartDetailDataProvider"
              AllowFiltering="false"
              AllowPaging="true"
              AllowSorting="false">
            <GridColumn TItem="CartDetailGridViewModel"
                        HeaderText="Name"
                        PropertyName="Name">
                @context.Name
            </GridColumn>
            <GridColumn TItem="CartDetailGridViewModel"
                        HeaderText="Is Bought"
                        PropertyName="IsBought">
                <ChildContent>
                    <Switch @bind-Value="@context.IsBought" />
                </ChildContent>
            </GridColumn>
        </Grid>
    </CardBody>
    <CardFooter>
        <div class="row">
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Secondary">
                    <Icon Name="IconName.X" />
                    Clear Cart
                </Button>
            </div>
            <div class="col-sm-2">
                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Primary"
                        @onclick="SaveCartWithIngredients">
                    <Icon Name="IconName.Save" />
                    Save Changes
                </Button>
            </div>
        </div>
    </CardFooter>
</Card>

<Modal @ref="addIngredientModal"
       Title="Add Ingredient"
       Size="ModalSize.Large"
       UseStaticBackdrop="true"
       CloseOnEscape="false">
    <BodyTemplate>
        <Grid @ref="cartIngredientSelectionGrid"
              TItem="CartIngredientSelectionGridViewModel"
              Class="table table-hover table-bordered"
              DataProvider="CartIngredientSelectionDataProvider"
              SelectionMode="GridSelectionMode.Multiple"
              @bind-SelectedItems="@selectedIngredients"
              AllowSelection="true"
              AllowPaging="true"
              AllowFiltering="false"
              AllowSorting="false"
              Responsive="true">
            <GridColumns>
                <GridColumn TItem="CartIngredientSelectionGridViewModel"
                            HeaderText="Id"
                            PropertyName="Id">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="CartIngredientSelectionGridViewModel"
                            HeaderText="Ingredient Name"
                            PropertyName="Name">
                    @context.Name
                </GridColumn>
            </GridColumns>
        </Grid>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary"
                @onclick="CloseAddIngrdientModal">
            <Icon Name="IconName.X" />
            Close
        </Button>
        <Button Color="ButtonColor.Primary"
                @onclick="ImportIngredients">
            <Icon Name="IconName.BoxArrowInDown" />
            Import
        </Button>
    </FooterTemplate>
</Modal>

@code {
    private CartDetailViewModel cartDetailViewModel = default!;

    private Grid<CartDetailGridViewModel> grid = default!;
    private List<CartDetailGridViewModel> gridDataSource = [];

    private Grid<CartIngredientSelectionGridViewModel> cartIngredientSelectionGrid = default!;
    private HashSet<CartIngredientSelectionGridViewModel> selectedIngredients = [];

    private Modal addIngredientModal = default!;

    private bool disableAddIngredientButton = true;

    [Inject]
    private CartService cartService { get; set; } = default!;
    [Inject]
    private IngredientService ingredientService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        cartDetailViewModel = new();
        cartDetailViewModel.Options = await cartService.GetCartOptions();
        await base.OnInitializedAsync();
    }

    private string? CartId
    {
        get => cartDetailViewModel.CartId;
        set
        {
            if (cartDetailViewModel.CartId == value)
            {
                return;
            }

            cartDetailViewModel.CartId = value;

            _ = InvokeAsync(CartOptionsOnChanged);
        }
    }

    private async Task CartOptionsOnChanged()
    {
        disableAddIngredientButton = true;
        gridDataSource.Clear();

        if (string.IsNullOrWhiteSpace(cartDetailViewModel.CartId))
        {
            if (grid is not null)
            {
                await grid.RefreshDataAsync();
            }
            return;
        }
        disableAddIngredientButton = false;
        var cartWithIngredients = await cartService.GetCartIngredients(cartDetailViewModel.CartId);
        gridDataSource.AddRange(cartWithIngredients);

        if (grid is not null)
        {
            await grid.RefreshDataAsync();
        }
    }

    private async Task<GridDataProviderResult<CartDetailGridViewModel>> CartDetailDataProvider(
        GridDataProviderRequest<CartDetailGridViewModel> request)
    {
        string sorting = string.Empty;
        string direction = string.Empty;
        if (request.Sorting is not null && request.Sorting.Any())
        {
            sorting = string.Join(
                ',',
                request.Sorting.Select(s => s.SortString).ToArray());
            direction = request.Sorting.FirstOrDefault()!.SortDirection.GetSortDirectionString();
        }

        return await Task.FromResult(
            new GridDataProviderResult<CartDetailGridViewModel>()
                {
                    Data = gridDataSource,
                    TotalCount = gridDataSource.Count
                });
    }

    private async Task ShowAddIngrdientModal()
    {
        selectedIngredients.Clear();
        await addIngredientModal.ShowAsync();
    }

    private async Task CloseAddIngrdientModal()
    {
        await addIngredientModal.HideAsync();
    }

    private async Task<GridDataProviderResult<CartIngredientSelectionGridViewModel>> CartIngredientSelectionDataProvider(
        GridDataProviderRequest<CartIngredientSelectionGridViewModel> request)
    {
        PaginationResult<IngredientDto> result = await ingredientService.GetIngredientsWithoutQuery(
            request.PageNumber,
            request.PageSize,
            request.CancellationToken);
        return await Task.FromResult(
            new GridDataProviderResult<CartIngredientSelectionGridViewModel>()
                {
                    Data = result.Items.Select(i =>
            new CartIngredientSelectionGridViewModel
                    {
                        Id = i.Id,
                        Name = i.Name
                    }),
                    TotalCount = result.TotalCount
                });
    }

    private async Task ImportIngredients()
    {
        if (selectedIngredients is null || selectedIngredients.Count == 0)
        {
            return;
        }

        foreach (CartIngredientSelectionGridViewModel ingredient in selectedIngredients)
        {
            gridDataSource.Add(new CartDetailGridViewModel
                {
                    IngredientId = ingredient.Id,
                    Name = ingredient.Name,
                    IsBought = false
                });
        }

        await grid.RefreshDataAsync();
        await CloseAddIngrdientModal();
    }

    private async Task SaveCartWithIngredients()
    {
    }
}
