<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-sm-10">
                <span>Result</span>
            </div>
            <div class="col-sm-2">
                <button class="btn btn-warning">
                    <span>Add</span>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <Grid TItem="IngredientDto"
              Class="table table-hover table-bordered table-striped"
              DataProvider="IngredientDataProvider"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              Responsive="true">

            <GridColumn TItem="IngredientDto"
                        HeaderText="Ingredient Name"
                        PropertyName="Name"
                        SortString="name"
                        FilterTextboxWidth="120">
                @context.Name
            </GridColumn>
            <GridColumn TItem="IngredientDto"
                        HeaderText="Shelf Life"
                        PropertyName="ShelfLifeOfDate"
                        SortString="shelfLifeOfDate"
                        FilterTextboxWidth="80">
                @context.ShelfLifeOfDate
            </GridColumn>
            <GridColumn TItem="IngredientDto"
                        HeaderText="Allergy"
                        PropertyName="IsAllergy"
                        SortString="isAllergy"
                        FilterTextboxWidth="80">
                @context.IsAllergy
            </GridColumn>
            <GridColumn TItem="IngredientDto"
                        HeaderText="Create Time"
                        PropertyName="CreatedAtUtc"
                        SortString="createdAtUtc"
                        FilterTextboxWidth="120">
                @context.CreatedAtUtc
            </GridColumn>
            <GridColumn TItem="IngredientDto"
                        HeaderText="Update Time"
                        PropertyName="UpdatedAtUtc"
                        SortString="updatedAtUtc"
                        FilterTextboxWidth="120">
                @context.UpdatedAtUtc
            </GridColumn>
        </Grid>
    </div>
</div>

@code {

    [Inject]
    public IngredientService IngredientService { get; set; }

    private async Task<GridDataProviderResult<IngredientDto>> IngredientDataProvider(GridDataProviderRequest<IngredientDto> request)
    {
        string sorting = string.Empty;
        string direction = string.Empty;
        if (request.Sorting is not null && request.Sorting.Any())
        {
            sorting = string.Join(
                ',',
                request.Sorting.Select(s => s.SortString).ToArray());
            direction = GetSortDirectionString(request.Sorting.FirstOrDefault()!.SortDirection);
        }

        List<IngredientDto> result = await IngredientService.GetIngredients(
            new IngredientQueryRequest
                {
                    Page = request.PageNumber,
                    PageSize = request.PageSize,
                    Sort = $"{sorting} {direction}",
                });

        return await Task.FromResult(
            new GridDataProviderResult<IngredientDto>
                {
                    Data = result,
                    TotalCount = result.Count
                });
    }

    private string GetSortDirectionString(SortDirection sortDirection) =>
        sortDirection switch
        {
            SortDirection.Ascending => "asc",
            SortDirection.Descending => "desc",
            _ => string.Empty
        };
}
