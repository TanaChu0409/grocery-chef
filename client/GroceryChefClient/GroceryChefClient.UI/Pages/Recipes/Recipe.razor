@page "/recipes"
@attribute [Authorize]

<h3>Recipe</h3>
<Card>
    <CardHeader>
        <div class="row">
            <div class="col-sm-2">
                <Button Color="ButtonColor.Warning" @onclick="ShowAddRecipeComponet">
                    <Icon Name="IconName.Plus" />
                    Add
                </Button>
            </div>
        </div>
    </CardHeader>
    <CardBody>
        <Grid @ref="grid"
              TItem="RecipeDto"
              Class="table table-hover table-bordered table-striped"
              DataProvider="RecipeDataProvider"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              Responsive="true"
              EmptyText="No recipes yet? Time for the chef in you to shine!">

            <GridColumn TItem="RecipeDto"
                        HeaderText="Name"
                        PropertyName="Name"
                        SortString="name"
                        SortKeySelector="@(item => item.Name)">
                @context.Name
            </GridColumn>

            <GridColumn TItem="RecipeDto"
                        HeaderText="Description"
                        PropertyName="Descriptions"
                        SortString="description"
                        SortKeySelector="@(item => item.Description)">
                @context.Description
            </GridColumn>

            <GridColumn TItem="RecipeDto"
                        HeaderText="Create Time"
                        PropertyName="CreatedAtUtc"
                        SortString="createdAtUtc"
                        SortKeySelector="@(item => item.CreatedAtUtc)">
                @context.CreatedAtUtc.ToLocalTime()
            </GridColumn>

            <GridColumn TItem="RecipeDto"
                        HeaderText="Update Time"
                        PropertyName="UpdatedAtUtc"
                        SortString="updatedAtUtc"
                        SortKeySelector="@(item => item.UpdatedAtUtc)">
                @context.UpdatedAtUtc?.ToLocalTime()
            </GridColumn>

            <GridColumn TItem="RecipeDto"
                        HeaderText="Action"
                        Filterable="false">
                <div class="row">
                    <div class="col-sm-12">
                        <Button Color="ButtonColor.Primary" @onclick="((args) => ShowEditRecipeComponet(args, context.Id))">
                            <Icon Name="IconName.PencilFill" />
                            Edit
                        </Button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <Button Color="ButtonColor.Secondary">
                            <Icon Name="IconName.Plus" />
                            Add ingredients
                        </Button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <Button Color="ButtonColor.Danger" @onclick="((args) => ConfirmationDeleteRecipeAsync(args, context.Id))">
                            <Icon Name="IconName.Trash2Fill" />
                            Delete
                        </Button>
                    </div>
                </div>
            </GridColumn>
        </Grid>
    </CardBody>
</Card>

<!--Add-->
<Modal @ref="modalCreate"
       Title="Create recipe"
       Size="ModalSize.Large"
       UseStaticBackdrop="true"
       CloseOnEscape="false">
    <BodyTemplate>
        <EditForm EditContext="@createContext" OnValidSubmit="AddRecipe">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-sm-4">
                    <span>Name<span class="text-danger">*</span></span>
                </div>
                <div class="col-sm-6">
                    <TextInput @bind-Value="@createRecipeViewModel.Name"
                               Placeholder="Please enter recipe name" />
                    <ValidationMessage For="@(() => createRecipeViewModel.Name)" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <span>Content<span class="text-danger">*</span></span>
                </div>
                <div class="col-sm-6">
                    <TextAreaInput @bind-Value="@createRecipeViewModel.Content"
                                   Rows="5"
                                   MaxLength="3000" />
                    <ValidationMessage For="@(() => createRecipeViewModel.Content)" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <span>Description</span>
                </div>
                <div class="col-sm-6">
                    <TextInput @bind-Value="@createRecipeViewModel.Description"
                               Placeholder="Please enter recipe description" />
                </div>
            </div>

        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideCreateModalClick">Close</Button>
        <Button Color="ButtonColor.Success" @onclick="AddRecipe">Save</Button>
    </FooterTemplate>
</Modal>

<!--Edit-->
<Modal @ref="modalEdit"
       Title="Edit recipe"
       Size="ModalSize.Large"
       UseStaticBackdrop="true"
       CloseOnEscape="false">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="EditRecipe">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-sm-4">
                    <span>Name<span class="text-danger">*</span></span>
                </div>
                <div class="col-sm-6">
                    <TextInput @bind-Value="@editRecipeViewModel.Name"
                               Placeholder="Please enter recipe name" />
                    <ValidationMessage For="@(() => editRecipeViewModel.Name)" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <span>Content<span class="text-danger">*</span></span>
                </div>
                <div class="col-sm-6">
                    <TextAreaInput @bind-Value="@editRecipeViewModel.Content"
                                   Rows="5"
                                   MaxLength="3000" />
                    <ValidationMessage For="@(() => editRecipeViewModel.Content)" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <span>Description</span>
                </div>
                <div class="col-sm-6">
                    <TextInput @bind-Value="@editRecipeViewModel.Description"
                               Placeholder="Please enter recipe description" />
                </div>
            </div>

        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideEditModalClick">Close</Button>
        <Button Color="ButtonColor.Success" @onclick="EditRecipe">Save</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modalAddIngredient"
       Title="Add Ingredients"
       Size="ModalSize.Large"
       UseStaticBackdrop="true"
       CloseOnEscape="false">
    <BodyTemplate>
        <!--User Sortable List-->
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary">Close</Button>
        <Button Color="ButtonColor.Success">Save</Button>
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="deleteDialog" />

@code {
    private Grid<RecipeDto> grid = default!;
    private Modal modalCreate = default!;
    private Modal modalEdit = default!;
    private Modal modalAddIngredient = default!;

    private ConfirmDialog deleteDialog = default!;

    private RecipeViewModel createRecipeViewModel;
    private RecipeViewModel editRecipeViewModel;

    private EditContext createContext;
    private EditContext editContext;

    [Inject]
    private RecipeService recipeService { get; set; }

    private async Task<GridDataProviderResult<RecipeDto>> RecipeDataProvider(
        GridDataProviderRequest<RecipeDto> request)
    {
        string sorting = string.Empty;
        string direction = string.Empty;
        if (request.Sorting is not null && request.Sorting.Any())
        {
            sorting = string.Join(
                ',',
                request.Sorting.Select(s => s.SortString).ToArray());
            direction = request.Sorting.FirstOrDefault()!.SortDirection.GetSortDirectionString();
        }

        var result = await recipeService.GetRecipes(
            new RecipeQueryRequest
                {
                    Page = request.PageNumber,
                    PageSize = request.PageSize,
                    Sort = $"{sorting} {direction}",
                    Filters = request.Filters
                },
            request.CancellationToken);

        return await Task.FromResult(
            new GridDataProviderResult<RecipeDto>
                {
                    Data = result,
                    TotalCount = result.Count
                });
    }

    private async Task ShowAddRecipeComponet()
    {
        createRecipeViewModel = new();
        createContext = new EditContext(createRecipeViewModel);
        await modalCreate.ShowAsync();
    }

    public async Task AddRecipe()
    {
        try
        {
            if (createContext?.Validate() == true)
            {
                await recipeService.AddRecipe(
                    new CreateRecipeDto
                        {
                            Name = createRecipeViewModel.Name,
                            Content = createRecipeViewModel.Content,
                            Description = createRecipeViewModel.Description
                        });
                await this.OnHideCreateModalClick();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task EditRecipe()
    {
        try
        {
            if (editContext?.Validate() == true &&
                !string.IsNullOrWhiteSpace(editRecipeViewModel.Id))
            {
                await recipeService.UpdateRecipeAsync(
                    editRecipeViewModel.Id,
                    editRecipeViewModel.ToDto());

                await this.OnHideEditModalClick();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task ShowEditRecipeComponet(EventArgs eventArgs, string id)
    {
        RecipeDto recipe = await recipeService.GetRecipeAsync(id);
        editRecipeViewModel = new();
        editRecipeViewModel = recipe.ToViewModel();
        editContext = new EditContext(editRecipeViewModel);
        await modalEdit.ShowAsync();
    }

    private async Task ConfirmationDeleteRecipeAsync(EventArgs eventArgs, string id)
    {
        bool deleteConfirmation = await deleteDialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the recipe. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (deleteConfirmation)
        {
            await recipeService.DeleteRecipeAsync(id);
            await grid.RefreshDataAsync();
        }
    }

    private async Task OnHideCreateModalClick()
    {
        await modalCreate.HideAsync();
        await grid.RefreshDataAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await modalEdit.HideAsync();
        await grid.RefreshDataAsync();
    }
}
