// <auto-generated />
using System;
using GroceryChef.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GroceryChef.Api.Migrations.Applications
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("grocerychef")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroceryChef.Api.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.ToTable("carts", "grocerychef");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.CartIngredient", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cart_id");

                    b.Property<string>("IngredientId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ingredient_id");

                    b.Property<bool>("IsBought")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bought");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "IngredientId")
                        .HasName("pk_cart_ingredients");

                    b.HasIndex("IngredientId")
                        .HasDatabaseName("ix_cart_ingredients_ingredient_id");

                    b.ToTable("cart_ingredients", "grocerychef");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at_utc");

                    b.Property<bool>("IsAllergy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_allergy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<int>("ShelfLifeOfDate")
                        .HasColumnType("integer")
                        .HasColumnName("shelf_life_of_date");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_ingredients");

                    b.ToTable("ingredients", "grocerychef");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.ToTable("recipes", "grocerychef");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.RecipeIngredient", b =>
                {
                    b.Property<string>("IngredientId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ingredient_id");

                    b.Property<string>("RecipeId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("recipe_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreateAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at_utc");

                    b.Property<int>("Unit")
                        .HasColumnType("integer")
                        .HasColumnName("unit");

                    b.HasKey("IngredientId", "RecipeId")
                        .HasName("pk_recipe_ingredients");

                    b.HasIndex("RecipeId")
                        .HasDatabaseName("ix_recipe_ingredients_recipe_id");

                    b.ToTable("recipe_ingredients", "grocerychef");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.CartIngredient", b =>
                {
                    b.HasOne("GroceryChef.Api.Entities.Cart", null)
                        .WithMany("CartIngredients")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_ingredients_carts_cart_id");

                    b.HasOne("GroceryChef.Api.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_ingredients_ingredients_ingredient_id");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("GroceryChef.Api.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_ingredients_ingredients_ingredient_id");

                    b.HasOne("GroceryChef.Api.Entities.Recipe", null)
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipe_ingredients_recipes_recipe_id");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.Cart", b =>
                {
                    b.Navigation("CartIngredients");
                });

            modelBuilder.Entity("GroceryChef.Api.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
